--- a/arch/mips/ath79/gpio.c
+++ b/arch/mips/ath79/gpio.c
@@ -271,6 +272,26 @@ void __init ath79_gpio_init(void)
 		panic("cannot add AR71xx GPIO chip, error=%d", err);
 }
 
+/* direction :0  output  , 1 input   */
+void qca953x_gpio_direction_select(unsigned gpio,int direction){
+	void __iomem *base = ath79_gpio_base;
+
+	if(direction)
+	     __raw_writel(__raw_readl(base + AR71XX_GPIO_REG_OE) |(1 << gpio),
+	     base + AR71XX_GPIO_REG_OE);
+	else
+		__raw_writel(__raw_readl(base + AR71XX_GPIO_REG_OE) & ~(1 << gpio),
+	     base + AR71XX_GPIO_REG_OE);
+
+}
+
+void qca953x_gpio_set_value(unsigned gpio, int  value){
+	if (gpio < ath79_gpio_count)
+		__ath79_gpio_set_value(gpio, value);
+	else
+		__gpio_set_value(gpio, value);
+}
+
 int gpio_get_value(unsigned gpio)
 {
 	if (gpio < ath79_gpio_count)
--- a/arch/mips/include/asm/mach-ath79/ar71xx_regs.h
+++ b/arch/mips/include/asm/mach-ath79/ar71xx_regs.h
@@ -741,6 +741,49 @@
 
 #define QCA956X_REV_ID_REVISION_MASK	0xf
 
+/* BEGIN: Added by vicharl,wnc  2014/5/29 */
+#define QCA953X_RESET_USB_PHY_PLL_PWD_EXT BIT(15)
+#define QCA953X_RESET_NANDF		BIT(14)
+#define QCA953X_RESET_GE1_MAC		BIT(13)
+#define QCA953X_RESET_SGMII_ANALOG	BIT(12)
+#define QCA953X_RESET_USB_PHY_ANALOG	BIT(11)
+#define QCA953X_RESET_HOST_DMA_INT	BIT(10)
+#define QCA953X_RESET_GE0_MAC		BIT(9)
+#define QCA953X_RESET_SGMII		BIT(8)
+#define QCA953X_RESET_PCIE_PHY		BIT(7)
+#define QCA953X_RESET_PCIE		BIT(6)
+#define QCA953X_RESET_USB_HOST		BIT(5)
+#define QCA953X_RESET_USB_PHY		BIT(4)
+#define QCA953X_RESET_USBSUS_OVERRIDE	BIT(3)
+#define QCA953X_RESET_LUT		BIT(2)
+#define QCA953X_RESET_MBOX		BIT(1)
+#define QCA953X_RESET_I2S		BIT(0)
+/* END:   Added by vicharl,wnc  2014/5/29 */
+
+/* BEGIN: Added by vicharl,wnc  2014/5/29 */
+#define QCA953X_EHCI0_BASE	0x1b000000
+//#define QCA953X_EHCI_SIZE	0x1000
+/* END:   Added by vicharl,wnc  2014/5/29 */
+
+/* BEGIN: Added by vicharl,wnc  2014/5/29 */
+#define QCA953X_RESET_USB_PHY_PLL_PWD_EXT BIT(15)
+#define QCA953X_RESET_NANDF		BIT(14)
+#define QCA953X_RESET_GE1_MAC		BIT(13)
+#define QCA953X_RESET_SGMII_ANALOG	BIT(12)
+#define QCA953X_RESET_USB_PHY_ANALOG	BIT(11)
+#define QCA953X_RESET_HOST_DMA_INT	BIT(10)
+#define QCA953X_RESET_GE0_MAC		BIT(9)
+#define QCA953X_RESET_SGMII		BIT(8)
+#define QCA953X_RESET_PCIE_PHY		BIT(7)
+#define QCA953X_RESET_PCIE		BIT(6)
+#define QCA953X_RESET_USB_HOST		BIT(5)
+#define QCA953X_RESET_USB_PHY		BIT(4)
+#define QCA953X_RESET_USBSUS_OVERRIDE	BIT(3)
+#define QCA953X_RESET_LUT		BIT(2)
+#define QCA953X_RESET_MBOX		BIT(1)
+#define QCA953X_RESET_I2S		BIT(0)
+/* END:   Added by vicharl,wnc  2014/5/29 */
+
 /*
  * SPI block
  */
--- a/arch/mips/include/asm/mach-ath79/ath79.h
+++ b/arch/mips/include/asm/mach-ath79/ath79.h
@@ -32,6 +32,8 @@ enum ath79_soc_type {
 	ATH79_SOC_AR9341,
 	ATH79_SOC_AR9342,
 	ATH79_SOC_AR9344,
+	ATH79_SOC_QCA9531,
+	ATH79_SOC_QCA9531_v2,
 	ATH79_SOC_QCA9533,
 	ATH79_SOC_QCA9556,
 	ATH79_SOC_QCA9558,
@@ -108,9 +110,19 @@ static inline int soc_is_qca9533(void)
 	return ath79_soc == ATH79_SOC_QCA9533;
 }
 
+static inline int soc_is_qca9531(void)
+{
+	return ath79_soc == ATH79_SOC_QCA9531;
+}
+
+static inline int soc_is_qca9531_v2(void)
+{
+	return ath79_soc == ATH79_SOC_QCA9531_v2;
+}
+
 static inline int soc_is_qca953x(void)
 {
-	return soc_is_qca9533();
+	return soc_is_qca9533() || soc_is_qca9531() || soc_is_qca9531_v2();
 }
 
 static inline int soc_is_qca9556(void)
